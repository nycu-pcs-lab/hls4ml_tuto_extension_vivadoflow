// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_myproject,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.976000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=50,HLS_SYN_LUT=286,HLS_VERSION=2023_2}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_1,
        input_1_ap_vld,
        layer3_out_0,
        layer3_out_0_ap_vld,
        layer3_out_1,
        layer3_out_1_ap_vld,
        layer3_out_2,
        layer3_out_2_ap_vld,
        layer3_out_3,
        layer3_out_3_ap_vld,
        layer3_out_4,
        layer3_out_4_ap_vld,
        layer3_out_5,
        layer3_out_5_ap_vld,
        layer3_out_6,
        layer3_out_6_ap_vld,
        layer3_out_7,
        layer3_out_7_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [47:0] input_1;
input   input_1_ap_vld;
output  [5:0] layer3_out_0;
output   layer3_out_0_ap_vld;
output  [5:0] layer3_out_1;
output   layer3_out_1_ap_vld;
output  [5:0] layer3_out_2;
output   layer3_out_2_ap_vld;
output  [5:0] layer3_out_3;
output   layer3_out_3_ap_vld;
output  [5:0] layer3_out_4;
output   layer3_out_4_ap_vld;
output  [5:0] layer3_out_5;
output   layer3_out_5_ap_vld;
output  [5:0] layer3_out_6;
output   layer3_out_6_ap_vld;
output  [5:0] layer3_out_7;
output   layer3_out_7_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer3_out_0_ap_vld;
reg layer3_out_1_ap_vld;
reg layer3_out_2_ap_vld;
reg layer3_out_3_ap_vld;
reg layer3_out_4_ap_vld;
reg layer3_out_5_ap_vld;
reg layer3_out_6_ap_vld;
reg layer3_out_7_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [47:0] input_1_preg;
reg   [47:0] input_1_in_sig;
reg    input_1_ap_vld_preg;
reg    input_1_ap_vld_in_sig;
reg    input_1_blk_n;
wire    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_ready;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_0_val;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_1_val;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_2_val;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_3_val;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_4_val;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_5_val;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_6_val;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_7_val;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_0;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_1;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_2;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_3;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_4;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_5;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_6;
wire   [5:0] call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_7;
reg    ap_block_state1;
wire   [5:0] trunc_ln18_fu_148_p1;
wire   [5:0] tmp1_fu_159_p4;
wire   [5:0] tmp_s_fu_176_p4;
wire   [5:0] tmp_1_fu_193_p4;
wire   [5:0] tmp_2_fu_210_p4;
wire   [5:0] tmp_3_fu_227_p4;
wire   [5:0] tmp_4_fu_244_p4;
wire   [5:0] tmp_5_fu_261_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 input_1_preg = 48'd0;
#0 input_1_ap_vld_preg = 1'b0;
end

myproject_relu_ap_int_6_ap_int_6_ReLU_config3_s call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136(
    .ap_ready(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_ready),
    .data_0_val(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_0_val),
    .data_1_val(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_1_val),
    .data_2_val(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_2_val),
    .data_3_val(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_3_val),
    .data_4_val(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_4_val),
    .data_5_val(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_5_val),
    .data_6_val(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_6_val),
    .data_7_val(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_7_val),
    .ap_return_0(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_0),
    .ap_return_1(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_1),
    .ap_return_2(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_2),
    .ap_return_3(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_3),
    .ap_return_4(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_4),
    .ap_return_5(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_5),
    .ap_return_6(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_6),
    .ap_return_7(call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_1_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            input_1_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (input_1_ap_vld == 1'b1))) begin
            input_1_ap_vld_preg <= input_1_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_1_preg <= 48'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (input_1_ap_vld == 1'b1))) begin
            input_1_preg <= input_1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((input_1_ap_vld == 1'b1)) begin
        input_1_ap_vld_in_sig = input_1_ap_vld;
    end else begin
        input_1_ap_vld_in_sig = input_1_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_1_blk_n = input_1_ap_vld;
    end else begin
        input_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((input_1_ap_vld == 1'b1)) begin
        input_1_in_sig = input_1;
    end else begin
        input_1_in_sig = input_1_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_0_ap_vld = 1'b1;
    end else begin
        layer3_out_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_1_ap_vld = 1'b1;
    end else begin
        layer3_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_2_ap_vld = 1'b1;
    end else begin
        layer3_out_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_3_ap_vld = 1'b1;
    end else begin
        layer3_out_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_4_ap_vld = 1'b1;
    end else begin
        layer3_out_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_5_ap_vld = 1'b1;
    end else begin
        layer3_out_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_6_ap_vld = 1'b1;
    end else begin
        layer3_out_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_7_ap_vld = 1'b1;
    end else begin
        layer3_out_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (input_1_ap_vld_in_sig == 1'b0));
end

assign call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_0_val = (tmp_5_fu_261_p4 + 6'd5);

assign call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_1_val = (tmp_4_fu_244_p4 + 6'd5);

assign call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_2_val = (tmp_3_fu_227_p4 + 6'd5);

assign call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_3_val = (tmp_2_fu_210_p4 + 6'd5);

assign call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_4_val = (tmp_1_fu_193_p4 + 6'd5);

assign call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_5_val = (tmp_s_fu_176_p4 + 6'd5);

assign call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_6_val = (tmp1_fu_159_p4 + 6'd5);

assign call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_7_val = (trunc_ln18_fu_148_p1 + 6'd5);

assign layer3_out_0 = call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_0;

assign layer3_out_1 = call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_1;

assign layer3_out_2 = call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_2;

assign layer3_out_3 = call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_3;

assign layer3_out_4 = call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_4;

assign layer3_out_5 = call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_5;

assign layer3_out_6 = call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_6;

assign layer3_out_7 = call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_7;

assign tmp1_fu_159_p4 = {{input_1_in_sig[11:6]}};

assign tmp_1_fu_193_p4 = {{input_1_in_sig[23:18]}};

assign tmp_2_fu_210_p4 = {{input_1_in_sig[29:24]}};

assign tmp_3_fu_227_p4 = {{input_1_in_sig[35:30]}};

assign tmp_4_fu_244_p4 = {{input_1_in_sig[41:36]}};

assign tmp_5_fu_261_p4 = {{input_1_in_sig[47:42]}};

assign tmp_s_fu_176_p4 = {{input_1_in_sig[17:12]}};

assign trunc_ln18_fu_148_p1 = input_1_in_sig[5:0];

endmodule //myproject
