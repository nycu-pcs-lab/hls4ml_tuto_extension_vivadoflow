-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_1 : IN STD_LOGIC_VECTOR (47 downto 0);
    input_1_ap_vld : IN STD_LOGIC;
    layer3_out_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer3_out_0_ap_vld : OUT STD_LOGIC;
    layer3_out_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer3_out_1_ap_vld : OUT STD_LOGIC;
    layer3_out_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer3_out_2_ap_vld : OUT STD_LOGIC;
    layer3_out_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer3_out_3_ap_vld : OUT STD_LOGIC;
    layer3_out_4 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer3_out_4_ap_vld : OUT STD_LOGIC;
    layer3_out_5 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer3_out_5_ap_vld : OUT STD_LOGIC;
    layer3_out_6 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer3_out_6_ap_vld : OUT STD_LOGIC;
    layer3_out_7 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer3_out_7_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_myproject,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.976000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=50,HLS_SYN_LUT=286,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_1_preg : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal input_1_in_sig : STD_LOGIC_VECTOR (47 downto 0);
    signal input_1_ap_vld_preg : STD_LOGIC := '0';
    signal input_1_ap_vld_in_sig : STD_LOGIC;
    signal input_1_blk_n : STD_LOGIC;
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_ready : STD_LOGIC;
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_0_val : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_1_val : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_2_val : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_3_val : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_4_val : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_5_val : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_6_val : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_7_val : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_4 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_5 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_6 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_7 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln18_fu_148_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_159_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_176_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_193_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_210_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_227_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_244_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_261_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_relu_ap_int_6_ap_int_6_ReLU_config3_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (5 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (5 downto 0);
        data_2_val : IN STD_LOGIC_VECTOR (5 downto 0);
        data_3_val : IN STD_LOGIC_VECTOR (5 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (5 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (5 downto 0);
        data_6_val : IN STD_LOGIC_VECTOR (5 downto 0);
        data_7_val : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136 : component myproject_relu_ap_int_6_ap_int_6_ReLU_config3_s
    port map (
        ap_ready => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_ready,
        data_0_val => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_0_val,
        data_1_val => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_1_val,
        data_2_val => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_2_val,
        data_3_val => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_3_val,
        data_4_val => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_4_val,
        data_5_val => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_5_val,
        data_6_val => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_6_val,
        data_7_val => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_7_val,
        ap_return_0 => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_0,
        ap_return_1 => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_1,
        ap_return_2 => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_2,
        ap_return_3 => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_3,
        ap_return_4 => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_4,
        ap_return_5 => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_5,
        ap_return_6 => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_6,
        ap_return_7 => call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    input_1_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_1_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    input_1_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_1_ap_vld = ap_const_logic_1))) then 
                    input_1_ap_vld_preg <= input_1_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    input_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_1_preg <= ap_const_lv48_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_1_ap_vld = ap_const_logic_1))) then 
                    input_1_preg <= input_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, input_1_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (input_1_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_0_val <= std_logic_vector(unsigned(tmp_5_fu_261_p4) + unsigned(ap_const_lv6_5));
    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_1_val <= std_logic_vector(unsigned(tmp_4_fu_244_p4) + unsigned(ap_const_lv6_5));
    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_2_val <= std_logic_vector(unsigned(tmp_3_fu_227_p4) + unsigned(ap_const_lv6_5));
    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_3_val <= std_logic_vector(unsigned(tmp_2_fu_210_p4) + unsigned(ap_const_lv6_5));
    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_4_val <= std_logic_vector(unsigned(tmp_1_fu_193_p4) + unsigned(ap_const_lv6_5));
    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_5_val <= std_logic_vector(unsigned(tmp_s_fu_176_p4) + unsigned(ap_const_lv6_5));
    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_6_val <= std_logic_vector(unsigned(tmp1_fu_159_p4) + unsigned(ap_const_lv6_5));
    call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_data_7_val <= std_logic_vector(unsigned(trunc_ln18_fu_148_p1) + unsigned(ap_const_lv6_5));

    input_1_ap_vld_in_sig_assign_proc : process(input_1_ap_vld, input_1_ap_vld_preg)
    begin
        if ((input_1_ap_vld = ap_const_logic_1)) then 
            input_1_ap_vld_in_sig <= input_1_ap_vld;
        else 
            input_1_ap_vld_in_sig <= input_1_ap_vld_preg;
        end if; 
    end process;


    input_1_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, input_1_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_1_blk_n <= input_1_ap_vld;
        else 
            input_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_1_in_sig_assign_proc : process(input_1, input_1_preg, input_1_ap_vld)
    begin
        if ((input_1_ap_vld = ap_const_logic_1)) then 
            input_1_in_sig <= input_1;
        else 
            input_1_in_sig <= input_1_preg;
        end if; 
    end process;

    layer3_out_0 <= call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_0;

    layer3_out_0_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_0_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer3_out_1 <= call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_1;

    layer3_out_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_1_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer3_out_2 <= call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_2;

    layer3_out_2_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_2_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer3_out_3 <= call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_3;

    layer3_out_3_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_3_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer3_out_4 <= call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_4;

    layer3_out_4_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_4_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer3_out_5 <= call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_5;

    layer3_out_5_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_5_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer3_out_6 <= call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_6;

    layer3_out_6_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_6_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer3_out_7 <= call_ret_relu_ap_int_6_ap_int_6_ReLU_config3_s_fu_136_ap_return_7;

    layer3_out_7_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_7_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_159_p4 <= input_1_in_sig(11 downto 6);
    tmp_1_fu_193_p4 <= input_1_in_sig(23 downto 18);
    tmp_2_fu_210_p4 <= input_1_in_sig(29 downto 24);
    tmp_3_fu_227_p4 <= input_1_in_sig(35 downto 30);
    tmp_4_fu_244_p4 <= input_1_in_sig(41 downto 36);
    tmp_5_fu_261_p4 <= input_1_in_sig(47 downto 42);
    tmp_s_fu_176_p4 <= input_1_in_sig(17 downto 12);
    trunc_ln18_fu_148_p1 <= input_1_in_sig(6 - 1 downto 0);
end behav;
